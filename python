Python Cheat Sheet 

+ addition "returns integer"
- subtration "returns interger"
* multiplcation "returns interger"
/ division "returns non-integer"
// division "guaranteed return of an integer 4//3 = 1"
% modulo "returns remainder"
** exponential/power of "returns the power of something"

# Comment with the hashtag symbol

# STRINGS 
-----------

Python accepts double quotation and single quotation marks 

print("G'day Mate")
print('G'day Mate') #invalid syntax '

Strings can be treated 'as' variables in python for example

you can concatenate two words together 

print("Hello" + " World")
"Hello World"

print("Hi"+"Hi"+"Hi")
print("Hi" * 3)
"HiHiHi"
"HiHiHi"

# VARIABLES
------------

message = "hello world"
print(message)
"hello world"

# just like the HiHiHi above we can do that using variables

msg = "Hi"
num = 3
print (msg * num)
"HiHiHi"

# Updating variables just by reassigning them

msg = "bye"
msg = msg * 2
print(msg)
"byebye"

# Rules
1. Variables names must start "with" alphabetic letter or an underscore (_)
2. Things you cannot use in a variable name:
	- Whitespaces(space,tab,new line)
	- Hyphens (-)
	- Quotations marks(single/double)
	- Symbol characters (e.g, ?,!,())

# Reserved Words
and, as, assert, break, class, continue, def, del, elif, else, except,  
Flase, finally, for, from, global, if, import, in, is , lambda, None,
nonlocal, not, or, pass, raise, return, True, try, while, with, yield.

# if you want your statement to continue over multiple lines you just write a backslash (\)
my_really_really_realy_clear_name = 7 * 5 * 4 * 2 * 3 + \
									4 + 3 * 42 - 3 
print(my_really_really_realy_clear_name)

# Input - built-in function that can be used to get keyboard input from the user as a string 

name = input("What is your name? ")
age = input("What is your age? ")
print("I know that", name, "is", age, "years old!")
"I know that Kevin is 20 years old!"

# the , in the print function combines the arguments together into a single output, separating each adjacent pair with a space

# DATA TYPES

int 	- # For whole numbers -3, -5, 10
float	- # For real numbers -3.0, 0.5, 3.14159
bool	- # True and False (only two these two values)
str     - # For chunks of text e.g: "Hello World"
tuple	- # For combinations of objects (1,2,3) or (1.0,"hello","frank")
list	- # A more powerful way of storing lists of objects [1,3,4] or [1.0,"hello","frank"]
dict	- # A mapping of a key to a value {"bob" : 34, "stanley" : 54}

# to check if a value is of a certain type:
print(type(23.0)) # <class 'float'>
print(type(1)) # <class 'int'>
print(type(1!=2)) # <class 'bool'>

# to print a value to the power of something 
print(1.55e20) # returns 1.55*10^20

# TYPE CASTING  - converting data into a specific type
print(int(32.7)) #prints 32
print(int("32")) #prints 32 (but as an integer)
print(int("32.7")) #fails as the decimal point is not a digit
print(float("32.7")) #prints 32.7 (but as a float)
print(str("32") + str(32.7)) #prints 3232.7

# input with numbers

num = input('Enter a number to double: ')
print('2 x', num, '=', 2 * num)
# 2 x 20 = 2020

num = int(input('Enter a number to double: ')) # type casting here allows the input to be converted into an integer
print('2 x', num, '=', 2 * num)
# 2 * 20 = 40


























































